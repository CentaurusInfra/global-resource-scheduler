/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/globalscheduler/pkg/apis/distributor/v1"
)

// DistributorLister helps list Distributors.
type DistributorLister interface {
	// List lists all Distributors in the indexer.
	List(selector labels.Selector) (ret []*v1.Distributor, err error)
	// Distributors returns an object that can list and get Distributors.
	Distributors(namespace string) DistributorNamespaceLister
	DistributorsWithMultiTenancy(namespace string, tenant string) DistributorNamespaceLister
	DistributorListerExpansion
}

// distributorLister implements the DistributorLister interface.
type distributorLister struct {
	indexer cache.Indexer
}

// NewDistributorLister returns a new DistributorLister.
func NewDistributorLister(indexer cache.Indexer) DistributorLister {
	return &distributorLister{indexer: indexer}
}

// List lists all Distributors in the indexer.
func (s *distributorLister) List(selector labels.Selector) (ret []*v1.Distributor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Distributor))
	})
	return ret, err
}

// Distributors returns an object that can list and get Distributors.
func (s *distributorLister) Distributors(namespace string) DistributorNamespaceLister {
	return distributorNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *distributorLister) DistributorsWithMultiTenancy(namespace string, tenant string) DistributorNamespaceLister {
	return distributorNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// DistributorNamespaceLister helps list and get Distributors.
type DistributorNamespaceLister interface {
	// List lists all Distributors in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.Distributor, err error)
	// Get retrieves the Distributor from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.Distributor, error)
	DistributorNamespaceListerExpansion
}

// distributorNamespaceLister implements the DistributorNamespaceLister
// interface.
type distributorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all Distributors in the indexer for a given namespace.
func (s distributorNamespaceLister) List(selector labels.Selector) (ret []*v1.Distributor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Distributor))
	})
	return ret, err
}

// Get retrieves the Distributor from the indexer for a given namespace and name.
func (s distributorNamespaceLister) Get(name string) (*v1.Distributor, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("distributor"), name)
	}
	return obj.(*v1.Distributor), nil
}
