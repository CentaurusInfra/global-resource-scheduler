/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClusterProtocolClient is the client API for ClusterProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterProtocolClient interface {
	SendClusterProfile(ctx context.Context, in *ClusterProfile, opts ...grpc.CallOption) (*ReturnMessage, error)
}

type clusterProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterProtocolClient(cc grpc.ClientConnInterface) ClusterProtocolClient {
	return &clusterProtocolClient{cc}
}

func (c *clusterProtocolClient) SendClusterProfile(ctx context.Context, in *ClusterProfile, opts ...grpc.CallOption) (*ReturnMessage, error) {
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, "/proto.ClusterProtocol/SendClusterProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterProtocolServer is the server API for ClusterProtocol service.
// All implementations must embed UnimplementedClusterProtocolServer
// for forward compatibility
type ClusterProtocolServer interface {
	SendClusterProfile(context.Context, *ClusterProfile) (*ReturnMessage, error)
	mustEmbedUnimplementedClusterProtocolServer()
}

// UnimplementedClusterProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedClusterProtocolServer struct {
}

func (UnimplementedClusterProtocolServer) SendClusterProfile(context.Context, *ClusterProfile) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClusterProfile not implemented")
}
func (UnimplementedClusterProtocolServer) mustEmbedUnimplementedClusterProtocolServer() {}

// UnsafeClusterProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterProtocolServer will
// result in compilation errors.
type UnsafeClusterProtocolServer interface {
	mustEmbedUnimplementedClusterProtocolServer()
}

func RegisterClusterProtocolServer(s grpc.ServiceRegistrar, srv ClusterProtocolServer) {
	s.RegisterService(&_ClusterProtocol_serviceDesc, srv)
}

func _ClusterProtocol_SendClusterProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterProtocolServer).SendClusterProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClusterProtocol/SendClusterProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterProtocolServer).SendClusterProfile(ctx, req.(*ClusterProfile))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClusterProtocol",
	HandlerType: (*ClusterProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClusterProfile",
			Handler:    _ClusterProtocol_SendClusterProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
