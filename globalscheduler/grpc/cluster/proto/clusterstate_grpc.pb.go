/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResourceCollectorProtocolClient is the client API for ResourceCollectorProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceCollectorProtocolClient interface {
	UpdateClusterStatus(ctx context.Context, in *ClusterState, opts ...grpc.CallOption) (*ReturnMessage, error)
}

type resourceCollectorProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceCollectorProtocolClient(cc grpc.ClientConnInterface) ResourceCollectorProtocolClient {
	return &resourceCollectorProtocolClient{cc}
}

func (c *resourceCollectorProtocolClient) UpdateClusterStatus(ctx context.Context, in *ClusterState, opts ...grpc.CallOption) (*ReturnMessage, error) {
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, "/proto.ResourceCollectorProtocol/UpdateClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceCollectorProtocolServer is the server API for ResourceCollectorProtocol service.
// All implementations must embed UnimplementedResourceCollectorProtocolServer
// for forward compatibility
type ResourceCollectorProtocolServer interface {
	UpdateClusterStatus(context.Context, *ClusterState) (*ReturnMessage, error)
	mustEmbedUnimplementedResourceCollectorProtocolServer()
}

// UnimplementedResourceCollectorProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedResourceCollectorProtocolServer struct {
}

func (UnimplementedResourceCollectorProtocolServer) UpdateClusterStatus(context.Context, *ClusterState) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterStatus not implemented")
}
func (UnimplementedResourceCollectorProtocolServer) mustEmbedUnimplementedResourceCollectorProtocolServer() {
}

// UnsafeResourceCollectorProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceCollectorProtocolServer will
// result in compilation errors.
type UnsafeResourceCollectorProtocolServer interface {
	mustEmbedUnimplementedResourceCollectorProtocolServer()
}

func RegisterResourceCollectorProtocolServer(s grpc.ServiceRegistrar, srv ResourceCollectorProtocolServer) {
	s.RegisterService(&_ResourceCollectorProtocol_serviceDesc, srv)
}

func _ResourceCollectorProtocol_UpdateClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCollectorProtocolServer).UpdateClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResourceCollectorProtocol/UpdateClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCollectorProtocolServer).UpdateClusterStatus(ctx, req.(*ClusterState))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceCollectorProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ResourceCollectorProtocol",
	HandlerType: (*ResourceCollectorProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateClusterStatus",
			Handler:    _ResourceCollectorProtocol_UpdateClusterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterstate.proto",
}
