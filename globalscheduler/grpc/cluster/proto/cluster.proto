/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

option go_package = "k8s.io/kubernetes/globalscheduler/grpc/cluster";
//option java_multiple_files = true;
//option java_package = "io.globalscheduler.grpc.cluster";
//option java_outer_classname = "ClusterProto";

package proto;

// service
service ClusterProtocol { 
    rpc SendClusterProfile(ClusterProfile) returns (ReturnMessage) {}
}

//message from ClusterController to ResourceCollector
message ClusterProfile {
    string ClusterNameSpace = 1;
    string ClusterName = 2;
    message ClusterSpecInfo {
        string ClusterIpAddress = 1;
        message GeoLocationInfo{
            string City = 1;
            string Province = 2;
            string Area = 3;
            string Country = 4;             
        }   
        message RegionInfo {
            string Region = 1;
            string AvailabilityZone = 2; 
        }
        message OperatorInfo {
            string Operator = 1;
        }
        message FlavorInfo {
            int64 FlavorID = 1;  //1:Small, 2:Medium, 3:Large, 4:Xlarge, 5:2xLarge 
            int64 TotalCapacity = 2;
        }
        enum StorageType {
            SATA = 0;
            SAS = 1;
            SSD = 2;
        }
        message StorageInfo {
            StorageType TypeID = 1; 
            int64   StorageCapacity =2;
        }
        GeoLocationInfo GeoLocation = 2;
        RegionInfo Region = 3;
        OperatorInfo Operator = 4;
        repeated FlavorInfo Flavor = 5;
        repeated StorageInfo Storage = 6;
        int64 EipCapacity = 7;  
        int64 CPUCapacity = 8;  
        int64 MemCapacity = 9;   
        int64 ServerPrice = 10;    
        string HomeScheduler = 11; 
   }
   ClusterSpecInfo ClusterSpec = 3;
}

//Message from ResourceCollector, Cluster Controller should get response from ResourceCollector.
message ReturnMessage {
    enum CodeType{
        Error = 0;
        OK = 1;
    }               
    string ClusterNameSpace = 1;
    string ClusterName = 2;
    CodeType  ReturnCode = 3;
    string Message = 4;
}
